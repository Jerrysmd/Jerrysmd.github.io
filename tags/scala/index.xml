<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>scala on JerrysBlog</title>
    <link>https://Jerrysmd.github.io/tags/scala/</link>
    <description>Recent content in scala on JerrysBlog</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Mon, 08 Mar 2021 10:16:17 +0800</lastBuildDate><atom:link href="https://Jerrysmd.github.io/tags/scala/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Scala Introduction</title>
      <link>https://Jerrysmd.github.io/post/20210308scalaintroduction/</link>
      <pubDate>Mon, 08 Mar 2021 10:16:17 +0800</pubDate>
      
      <guid>https://Jerrysmd.github.io/post/20210308scalaintroduction/</guid>
      <description>
        
          &lt;p&gt;Scala combines object-oriented and functional programming in one concise, high-level language. Scala&#39;s static types help avoid bugs in complex applications, and its JVM and JavaScript runtimes let you build high-performance systems with easy access to huge ecosystems of libraries.&lt;/p&gt;
&lt;h2 id=&#34;1-repl--scaladoc&#34;&gt;1. REPL &amp;amp; Scaladoc&lt;/h2&gt;
&lt;p&gt;Scala解释器读到一个表达式，对它进行求值，将它打印出来，接着再继续读下一个表达式。这个过程被称做Read-Eval-Print-Loop，即：REPL。
从技术上讲，scala程序并不是一个解释器。实际发生的是，你输入的内容被快速地编译成字节码，然后这段字节码交由Java虚拟机执行。正因为如此，大多数scala程序员更倾向于将它称做“REPL”&lt;/p&gt;
&lt;p&gt;scala api文档，包含了scala所有的api以及使用说明，class、object、trait、function、method、implicit等&lt;/p&gt;
&lt;p&gt;为什么要查阅Scaladoc：如果只是写一些普通的Scala程序基本够用了；但是如果（在现在，或者未来，实际的工作环境中）要编写复杂的scala程序，那么还是需要参考Scaladoc的。（纯粹用scala开发spark应用程序，应该不会特别复杂；用scala构建类似于spark的公司内的分布式的大型系统）&lt;/p&gt;
&lt;p&gt;以下是一些Scaladoc使用的tips：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;直接在左上角的搜索框中，搜索你需要的寻找的包、类即可&lt;/li&gt;
&lt;li&gt;C和O，分别代表了类和伴生对象的概念&lt;/li&gt;
&lt;li&gt;t和O，代表了特制(trait)(类似于Java的接口)&lt;/li&gt;
&lt;li&gt;标记为implicit的方法，代表的是隐式转换&lt;/li&gt;
&lt;li&gt;举例：搜索StringOps，可以看到String的增强类，StringOps的所有方法说明&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;2-data-type&#34;&gt;2. Data Type&lt;/h2&gt;
&lt;h3 id=&#34;21-data-type&#34;&gt;2.1 Data Type&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;数据类型&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Byte&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;8位有符号补码整数。数值区间为 -128 到 127&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Short&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;16位有符号补码整数。数值区间为 -32768 到 32767&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Int&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;32位有符号补码整数。数值区间为 -2147483648 到 2147483647&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Long&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;64位有符号补码整数。数值区间为 -9223372036854775808 到 9223372036854775807&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Float&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;32 位, IEEE 754 标准的单精度浮点数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Double&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;64 位 IEEE 754 标准的双精度浮点数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Char&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;16位无符号Unicode字符, 区间值为 U+0000 到 U+FFFF&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;String&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;字符序列&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Boolean&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;true或false&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Unit&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;表示无值，和其他语言中void等同。用作不返回任何结果的方法的结果类型。Unit只有一个实例值，写成()。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Null&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;null 或空引用&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Nothing&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Nothing类型在Scala的类层级的最底端；它是任何其他类型的子类型。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Any&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Any是所有其他类的超类&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;AnyRef&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;AnyRef类是Scala里所有引用类(reference class)的基类&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;22-valvar--lazy-value&#34;&gt;2.2 val、var &amp;amp; Lazy Value&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;内容是否可变：val修饰的是不可变的，var修饰是可变的&lt;/li&gt;
&lt;li&gt;val修饰的变量在编译后类似于java中的中的变量被final修饰&lt;/li&gt;
&lt;li&gt;lazy修饰符可以修饰变量，但是这个变量必须是val修饰的&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;ps. lazy相当于延迟加载（懒加载），当前变量使用lazy修饰的时候，只要变量不被调用，就不会进行初始化，什么时候调用，什么时候进行初始化&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;lazy&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;val&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;words&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;scala&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;io&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;Source&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fromFile&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;/usr/share/dict/words&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mkString&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//当val被声明为lazy时，它的初始化将被推迟，直到我们首次对他取值
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;懒值对于开销大的初始化语句十分有用。它还可以用来应对其他初始化问题，比如循环依赖。更重要的是，它是开发懒数据结构的基础。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;val&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;words&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;...&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//在words被定义时即被取值
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;lazy&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;val&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;words&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;...&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//在words被首次使用时取值
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;words&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;...&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//在每一次words被使用时取值
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;3-control-and-function&#34;&gt;3. Control and Function&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;if表达式也有值&lt;/li&gt;
&lt;li&gt;块也有值：是它最后一个表达式的值&lt;/li&gt;
&lt;li&gt;Scala的for循环就像是“增强版”的Java for循环&lt;/li&gt;
&lt;li&gt;分好在绝大数情况下不是必须的&lt;/li&gt;
&lt;li&gt;void类型是Unit&lt;/li&gt;
&lt;li&gt;避免在函数使用return&lt;/li&gt;
&lt;li&gt;注意别再函数式定义中使用return&lt;/li&gt;
&lt;li&gt;异常的工作方式和Java或C++基本一样，不同的是你在catch语句中使用“模式匹配”&lt;/li&gt;
&lt;li&gt;Scala没有受检异常&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;4-array&#34;&gt;4. Array&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;若长度固定可用Array，若长度可能有变化则使用ArrayBuffer&lt;/li&gt;
&lt;li&gt;提供初始值时不要使用new&lt;/li&gt;
&lt;li&gt;用()来访问元素&lt;/li&gt;
&lt;li&gt;用for(elem &amp;lt;- arr)来遍历元素&lt;/li&gt;
&lt;li&gt;用for(elem &amp;lt;- arr if ...) yield ... 来将原数据转型为新数组&lt;/li&gt;
&lt;li&gt;Scala数组和Java数组可以相互操作，用ArrayBuffer，使用scala.collection.JavaConversions中的转换函数&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;5-map-and-tuple&#34;&gt;5. Map and Tuple&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Scala有十分易用的语法来创建、查询和遍历映射(Map)&lt;/li&gt;
&lt;li&gt;你需要从可变的和不可变的映射中做出选择&lt;/li&gt;
&lt;li&gt;默认情况下，你得到的是一个哈希映射(Hash Map)，不过你也可以指明要树形映射&lt;/li&gt;
&lt;li&gt;你可以很容易地在Scala映射和Java映射之间来回切换&lt;/li&gt;
&lt;li&gt;元组可以用来聚集值&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;6-class&#34;&gt;6. Class&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;类中的字段自动带有getter方法和setter方法&lt;/li&gt;
&lt;li&gt;可以用定制的getter/setter方法替换掉字段的定义，而不必修改使用类的客户端——这就是所谓的“统一访问原则”&lt;/li&gt;
&lt;li&gt;用@BeanProperty注解来生成JavaBeans的get*/set*方法&lt;/li&gt;
&lt;li&gt;每个类都有一个主要的构造器，这个构造器和类定义&amp;quot;交织&amp;quot;在一起。它的参数直接为类的字段。主构造器执行类体中所有的语句&lt;/li&gt;
&lt;li&gt;辅助构造器是可选的。他们叫做this&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;7-object&#34;&gt;7. Object&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;对象作为单例或存放工具方法&lt;/li&gt;
&lt;li&gt;类可以拥有一个同名的伴生对象&lt;/li&gt;
&lt;li&gt;对象可以扩展类或特质&lt;/li&gt;
&lt;li&gt;对象的apply方法通常用来构造伴生类的新实例&lt;/li&gt;
&lt;li&gt;如果不想显示定义main方法，可以用扩展App特质的对象&lt;/li&gt;
&lt;li&gt;可以通过扩展Enumeration对象来实现枚举&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;8-package&#34;&gt;8. Package&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;包也可以像内部类那样嵌套&lt;/li&gt;
&lt;li&gt;包路径不是绝对路径&lt;/li&gt;
&lt;li&gt;包声明链x.y.z并不自动将中间包x和x.y变成可见&lt;/li&gt;
&lt;li&gt;位于文件顶部不带花括号的包声明在整个文件范围内有效&lt;/li&gt;
&lt;li&gt;包对象可以持有函数和变量&lt;/li&gt;
&lt;li&gt;引入语句可以引入包、类和对象&lt;/li&gt;
&lt;li&gt;引入语句可以出现在任何位置&lt;/li&gt;
&lt;li&gt;引入语句可以重命名和隐藏特定成员&lt;/li&gt;
&lt;li&gt;java.lang、scala和predef总是被引入&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;9-extends&#34;&gt;9. Extends&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;extends、final关键字和Java中相同&lt;/li&gt;
&lt;li&gt;重写方法时必须用override&lt;/li&gt;
&lt;li&gt;只有主构造器可以用超类的主构造器&lt;/li&gt;
&lt;li&gt;可以重写字段&lt;/li&gt;
&lt;/ol&gt;
        
      </description>
    </item>
    
  </channel>
</rss>
