<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>SQL - Tag - JerrysBlog</title><link>https://jerrysmd.github.io/tags/sql/</link><description>SQL - Tag - JerrysBlog</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Fri, 03 Nov 2023 07:13:59 +0800</lastBuildDate><atom:link href="https://jerrysmd.github.io/tags/sql/" rel="self" type="application/rss+xml"/><item><title>Tracking SQLite Database Changes in Git</title><link>https://jerrysmd.github.io/20231103_track-sqlite-changes/</link><pubDate>Fri, 03 Nov 2023 07:13:59 +0800</pubDate><author/><guid>https://jerrysmd.github.io/20231103_track-sqlite-changes/</guid><description><![CDATA[<p>SQLite stores data in binary. If you run <code>cat mydb.sqlite</code>, you&rsquo;ll see a bunch of gibberish that doesn&rsquo;t resemble structured data at all. If you want to track changes and updates to a database using Git, you won&rsquo;t be able to see full diffs by default.</p>]]></description></item><item><title>Spark Performance Tuning</title><link>https://jerrysmd.github.io/20220719_spark-optimization/</link><pubDate>Tue, 19 Jul 2022 14:54:16 +0800</pubDate><author/><guid>https://jerrysmd.github.io/20220719_spark-optimization/</guid><description>&lt;p>Spark SQL is the top active component in spark 3.0 release. Most of the resolved tickets are for Spark SQL. These enhancements benefit all the higher-level libraries, including structured streaming and MLlib, and higher level APIs, including SQL and DataFrames. Various related optimizations are added in latest release.&lt;/p></description></item><item><title>ClickHouse: A Distributed Database for High-Performance Analytics</title><link>https://jerrysmd.github.io/20201107_clickhouse-intro/</link><pubDate>Sat, 07 Nov 2020 14:55:59 +0800</pubDate><author/><guid>https://jerrysmd.github.io/20201107_clickhouse-intro/</guid><description>&lt;p>A high performance columnar OLAP database management system for real-time analytics using SQL. ClickHouse can be customized with a new set of efficient columnar storage engines, and has realized rich functions such as data ordered storage, primary key indexing, sparse indexing, data sharding, data partitioning, TTL, and primary and backup replication.&lt;/p></description></item><item><title>Hbase Rowkey Design</title><link>https://jerrysmd.github.io/20201016_hbase-rowkey-design/</link><pubDate>Fri, 16 Oct 2020 10:30:42 +0800</pubDate><author/><guid>https://jerrysmd.github.io/20201016_hbase-rowkey-design/</guid><description>&lt;p>Rows in HBase are sorted lexicographically by row key. This design optimizes for scans, allowing you to store related rows, or rows that will be read together, near each other. However, poorly designed row keys are a common source of hotspotting. Hotspotting occurs when a large amount of client traffic is directed at one node, or only a few nodes, of a cluster. This traffic may represent reads, writes, or other operations. The traffic overwhelms the single machine responsible for hosting that region, causing performance degradation and potentially leading to region unavailability. This can also have adverse effects on other regions hosted by the same region server as that host is unable to service the requested load. It is important to design data access patterns such that the cluster is fully and evenly utilized.&lt;/p></description></item><item><title>SQLcipher Guide</title><link>https://jerrysmd.github.io/20181118_sqlcipher/</link><pubDate>Sun, 18 Nov 2018 21:58:51 -0800</pubDate><author/><guid>https://jerrysmd.github.io/20181118_sqlcipher/</guid><description>&lt;p>SQLCipher is based on SQLite, and thus, the majority of the accessible API is identical to the C/C++ interface for SQLite 3. However, SQLCipher does add a number of security specific extensions in the form of PRAGMAs, SQL Functions and C Functions.&lt;/p></description></item><item><title>SQL Introduction</title><link>https://jerrysmd.github.io/20181017_sql-introduction/</link><pubDate>Wed, 17 Oct 2018 11:52:36 +0800</pubDate><author/><guid>https://jerrysmd.github.io/20181017_sql-introduction/</guid><description>&lt;p>In computer programming, create, read, update, and delete (CRUD) are the four basic functions of persistent storage. Alternate words are sometimes used when defining the four basic functions of CRUD, such as retrieve instead of read, modify instead of update, or destroy instead of delete. CRUD is also sometimes used to describe user interface conventions that facilitate viewing, searching, and changing information, often using computer-based forms and reports.&lt;/p></description></item></channel></rss>