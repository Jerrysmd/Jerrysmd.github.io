<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>c on JerrysBlog</title>
    <link>https://jerrysmd.github.io/tags/c/</link>
    <description>Recent content in c on JerrysBlog</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Mon, 07 Oct 2019 09:11:47 +0800</lastBuildDate><atom:link href="https://jerrysmd.github.io/tags/c/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Various data types in C</title>
      <link>https://jerrysmd.github.io/post/20191007_u32/</link>
      <pubDate>Mon, 07 Oct 2019 09:11:47 +0800</pubDate>
      
      <guid>https://jerrysmd.github.io/post/20191007_u32/</guid>
      <description>
        
          
            &lt;p&gt;C/C++ provides various data types that can be used in your programs.In general, you&#39;d commonly use: int for most variables and &amp;quot;countable&amp;quot; things (for loop counts, variables, events). char for characters and strings. float for general measurable things (seconds, distance, temperature). uint32 for bit manipulations, especially on 32-bit registers.&lt;/p&gt;
          
          
        
      </description>
    </item>
    
    <item>
      <title>The size of structure in C</title>
      <link>https://jerrysmd.github.io/post/20190825_structsize/</link>
      <pubDate>Sun, 25 Aug 2019 14:38:34 +0800</pubDate>
      
      <guid>https://jerrysmd.github.io/post/20190825_structsize/</guid>
      <description>
        
          
            &lt;p&gt;The sizeof for a struct is not always equal to the sum of sizeof of each individual member. This is because of the padding added by the compiler to avoid alignment issues. Padding is only added when a structure member is followed by a member with a larger size or at the end of the structure.&lt;/p&gt;
          
          
        
      </description>
    </item>
    
    <item>
      <title>The descriptions of typedef</title>
      <link>https://jerrysmd.github.io/post/20190717_typedef/</link>
      <pubDate>Wed, 17 Jul 2019 09:22:18 +0800</pubDate>
      
      <guid>https://jerrysmd.github.io/post/20190717_typedef/</guid>
      <description>
        
          
            &lt;p&gt;A typedef is a C keyword that defines a new name for a data type, including internal data types (int, char, etc.) and custom data types (struct, etc.). A typedef is itself a type of stored class keyword that cannot appear in the same expression as the keywords auto, extern, static, register, etc.&lt;/p&gt;
          
          
        
      </description>
    </item>
    
    <item>
      <title>Conditional compilation directives</title>
      <link>https://jerrysmd.github.io/post/20190611_conditionalcompilation/</link>
      <pubDate>Tue, 11 Jun 2019 10:42:49 +0800</pubDate>
      
      <guid>https://jerrysmd.github.io/post/20190611_conditionalcompilation/</guid>
      <description>
        
          
            &lt;p&gt;Conditional compilation is static compilation of code based on the actual definition of macros (some kind of condition). Compilation conditions can be determined based on the value of an expression or whether a particular macro is defined. C language conditional compilation related precompilation instructions, including #define, #undef, #ifdef, #ifndef, #if, #elif, #else, #endif, defined.&lt;/p&gt;
          
          
        
      </description>
    </item>
    
    <item>
      <title>C Project performance optimization</title>
      <link>https://jerrysmd.github.io/post/20190409_cperformanceoptimization/</link>
      <pubDate>Tue, 09 Apr 2019 20:04:00 +0800</pubDate>
      
      <guid>https://jerrysmd.github.io/post/20190409_cperformanceoptimization/</guid>
      <description>
        
          
            &lt;p&gt;Performance optimization methods and ideas for large C projects. Performance optimization strategies for x86 projects that encounter performance bottlenecks when porting to low performance processors.&lt;/p&gt;
          
          
        
      </description>
    </item>
    
    <item>
      <title>GDB debug guide</title>
      <link>https://jerrysmd.github.io/post/20190304_gdb-debug/</link>
      <pubDate>Mon, 04 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://jerrysmd.github.io/post/20190304_gdb-debug/</guid>
      <description>
        
          
            &lt;p&gt;GDB is a powerful program debugging tool based on command line under UNIX/LINUX operating system released by GNU Source Organization. For a C/C ++ programmer working on Linux, GDB is an essential tool.&lt;/p&gt;
          
          
        
      </description>
    </item>
    
    <item>
      <title>HugePages</title>
      <link>https://jerrysmd.github.io/post/20190203_hugepages/</link>
      <pubDate>Sun, 03 Feb 2019 13:04:09 -0800</pubDate>
      
      <guid>https://jerrysmd.github.io/post/20190203_hugepages/</guid>
      <description>
        
          
            &lt;p&gt;Reduce page tables by increasing the size of operating system pages to avoid fast table misses. Large page memory optimizer is designed for malloc mechanism, which means allocating large pages to increase TLB hit ratio.&lt;/p&gt;
          
          
        
      </description>
    </item>
    
    <item>
      <title>Dynamic link library and static link library</title>
      <link>https://jerrysmd.github.io/post/20190125_dynamicstaticlinklibrary/</link>
      <pubDate>Fri, 25 Jan 2019 22:01:19 -0800</pubDate>
      
      <guid>https://jerrysmd.github.io/post/20190125_dynamicstaticlinklibrary/</guid>
      <description>
        
          
            &lt;p&gt;In development, we just need to know that lib is needed at compile time and DLL is needed at run time. If you want to compile source code, lib is all you need. If you want dynamically connected programs to run, you need only a DLL. This article will more clearly understand the difference, generation, use of the two.&lt;/p&gt;
          
          
        
      </description>
    </item>
    
    <item>
      <title>The Advanced method of reading files</title>
      <link>https://jerrysmd.github.io/post/20181220_read-binary-file/</link>
      <pubDate>Thu, 20 Dec 2018 18:39:37 -0700</pubDate>
      
      <guid>https://jerrysmd.github.io/post/20181220_read-binary-file/</guid>
      <description>
        
          
            &lt;p&gt;Read the binary file (any file will do; this article uses binary as an example) and read the entire contents of the binary file into a char* string. With fseek() and fread() functions to achieve file reading advanced methods.&lt;/p&gt;
          
          
        
      </description>
    </item>
    
    <item>
      <title>SQLcipher Guide</title>
      <link>https://jerrysmd.github.io/post/20181118_sqlcipher/</link>
      <pubDate>Sun, 18 Nov 2018 21:58:51 -0800</pubDate>
      
      <guid>https://jerrysmd.github.io/post/20181118_sqlcipher/</guid>
      <description>
        
          
            &lt;p&gt;SQLCipher is based on SQLite, and thus, the majority of the accessible API is identical to the C/C++ interface for SQLite 3. However, SQLCipher does add a number of security specific extensions in the form of PRAGMAs, SQL Functions and C Functions.&lt;/p&gt;
          
          
        
      </description>
    </item>
    
    <item>
      <title>Makefile Guide</title>
      <link>https://jerrysmd.github.io/post/20180915_makefile-cmakelist/</link>
      <pubDate>Sat, 15 Sep 2018 21:59:46 -0800</pubDate>
      
      <guid>https://jerrysmd.github.io/post/20180915_makefile-cmakelist/</guid>
      <description>
        
          
            &lt;p&gt;Makefiles define a set of rules that specify which files need to be compiled first, which files need to be compiled later, which files need to be recompiled, and even more complex functional operations, because makefiles are like Shell scripts that also execute operating system commands. One of the benefits of Makefiles is that they are &amp;quot;automatically compiled&amp;quot;. The entire project is automatically compiled, greatly improving the efficiency of software development.&lt;/p&gt;
          
          
        
      </description>
    </item>
    
    <item>
      <title>Hyperscan: high-performance multiple regex matching library</title>
      <link>https://jerrysmd.github.io/post/20180812_hyperscan/</link>
      <pubDate>Sun, 12 Aug 2018 05:42:44 -0700</pubDate>
      
      <guid>https://jerrysmd.github.io/post/20180812_hyperscan/</guid>
      <description>
        
          
            &lt;p&gt;Hyperscan is a high-performance regular expression matching library from Intel. It is based on the X86 platform based on PCRE prototype development. While supporting most of the syntax of PCRE, Hyperscan adds specific syntax and working modes to ensure its usefulness in real-world network scenarios.&lt;/p&gt;
          
          
        
      </description>
    </item>
    
    <item>
      <title>The problem about file reading one more line</title>
      <link>https://jerrysmd.github.io/post/20180610_cgetline/</link>
      <pubDate>Sun, 10 Jun 2018 21:58:13 -0800</pubDate>
      
      <guid>https://jerrysmd.github.io/post/20180610_cgetline/</guid>
      <description>
        
          
            &lt;p&gt;Getline ()/get()/read() will read one more line. The cause may be a problem with the file itself or the getline() function. You can judge getLine ()/get()/read() while checking, and then process the data if you get it.&lt;/p&gt;
          
          
        
      </description>
    </item>
    
    <item>
      <title>The realization of the MXML</title>
      <link>https://jerrysmd.github.io/post/20180507_mxml/</link>
      <pubDate>Mon, 07 May 2018 21:57:23 -0800</pubDate>
      
      <guid>https://jerrysmd.github.io/post/20180507_mxml/</guid>
      <description>
        
          
            &lt;p&gt;MXML (Minimal XML) is a small, fast and versatile library that reads a whole XML file and puts it in a DOM tree.&lt;/p&gt;
          
          
        
      </description>
    </item>
    
    <item>
      <title>C language realize HashMap</title>
      <link>https://jerrysmd.github.io/post/20180405_hashcode/</link>
      <pubDate>Thu, 05 Apr 2018 21:56:51 -0800</pubDate>
      
      <guid>https://jerrysmd.github.io/post/20180405_hashcode/</guid>
      <description>
        
          
            &lt;p&gt;Hash table is a very important data structure, which is useful in many application scenarios. This paper will simply analyze the principle of hash table, and use C language to achieve a complete HashMap.&lt;/p&gt;
          
          
        
      </description>
    </item>
    
  </channel>
</rss>
