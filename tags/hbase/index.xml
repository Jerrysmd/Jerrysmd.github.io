<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Hbase - Tag - JerrysBlog</title><link>https://jerrysmd.github.io/tags/hbase/</link><description>Hbase - Tag - JerrysBlog</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Mon, 26 Oct 2020 09:14:35 +0800</lastBuildDate><atom:link href="https://jerrysmd.github.io/tags/hbase/" rel="self" type="application/rss+xml"/><item><title>Hbase Optimization</title><link>https://jerrysmd.github.io/20201026_hbase-optimize/</link><pubDate>Mon, 26 Oct 2020 09:14:35 +0800</pubDate><author/><guid>https://jerrysmd.github.io/20201026_hbase-optimize/</guid><description>&lt;p>HBase is a high reliability, high performance, column-oriented, and scalable distributed database. However, the READ/write performance deteriorates when a large amount of concurrent data or existing data is generated. You can use the following methods to improve the HBase search speed.&lt;/p></description></item><item><title>Hbase Rowkey Design</title><link>https://jerrysmd.github.io/20201016_hbase-rowkey-design/</link><pubDate>Fri, 16 Oct 2020 10:30:42 +0800</pubDate><author/><guid>https://jerrysmd.github.io/20201016_hbase-rowkey-design/</guid><description>&lt;p>Rows in HBase are sorted lexicographically by row key. This design optimizes for scans, allowing you to store related rows, or rows that will be read together, near each other. However, poorly designed row keys are a common source of hotspotting. Hotspotting occurs when a large amount of client traffic is directed at one node, or only a few nodes, of a cluster. This traffic may represent reads, writes, or other operations. The traffic overwhelms the single machine responsible for hosting that region, causing performance degradation and potentially leading to region unavailability. This can also have adverse effects on other regions hosted by the same region server as that host is unable to service the requested load. It is important to design data access patterns such that the cluster is fully and evenly utilized.&lt;/p></description></item></channel></rss>