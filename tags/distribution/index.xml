<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Distribution - Tag - JerrysBlog</title><link>https://jerrysmd.github.io/tags/distribution/</link><description>Distribution - Tag - JerrysBlog</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Sat, 13 Jan 2024 08:08:13 +0800</lastBuildDate><atom:link href="https://jerrysmd.github.io/tags/distribution/" rel="self" type="application/rss+xml"/><item><title>Speed Up Your Site with a CDN: Content Delivery Network Essentials</title><link>https://jerrysmd.github.io/20240113_cdn/</link><pubDate>Sat, 13 Jan 2024 08:08:13 +0800</pubDate><author/><guid>https://jerrysmd.github.io/20240113_cdn/</guid><description>&lt;p>One scenario where I need a CDN is for dynamically requesting static JavaScript files on my website. Hosting these large JS files myself would significantly impact my bandwidth usage since my host charges based on traffic volume. Using a CDN helps solve this issue by distributing requests across its worldwide network of data centers. Not only does this improve access speeds by caching files closer to users, it also reduces my origin server load and bandwidth costs. With assets offloaded to the CDN, my website performance is optimized for a better user experience while keeping infrastructure expenses down. In summary, a CDN provides clear benefits in both performance and savings for serving the static files required by my application at global scale.&lt;/p></description></item><item><title>The Development of App Architecture</title><link>https://jerrysmd.github.io/20200526_app-architecture-development/</link><pubDate>Tue, 26 May 2020 17:17:50 +0800</pubDate><author/><guid>https://jerrysmd.github.io/20200526_app-architecture-development/</guid><description>&lt;p>The features of large applications: high availability, high concurrency and big data. High availability: system need to provide service without interruption. High concurrency: still stable under the big access. Big data: store and manage big data well.&lt;/p></description></item><item><title>ZooKeeper: A Coordination Service for Distributed Systems</title><link>https://jerrysmd.github.io/20200519_zookeeper/</link><pubDate>Tue, 19 May 2020 16:07:17 +0800</pubDate><author/><guid>https://jerrysmd.github.io/20200519_zookeeper/</guid><description>&lt;p>ZooKeeper is an open source distributed coordination framework. It is positioned to provide consistent services for distributed applications and is the administrator of the entire big data system. ZooKeeper will encapsulate key services that are complex and error-prone, and provide users with efficient, stable, and easy-to-use services.&lt;/p></description></item><item><title>Kafka: A Stream Processing Platform for Distributed Applications</title><link>https://jerrysmd.github.io/20200427_kafka/</link><pubDate>Mon, 27 Apr 2020 14:21:19 +0800</pubDate><author/><guid>https://jerrysmd.github.io/20200427_kafka/</guid><description><![CDATA[<p>Apache Kafka aims to provide a unified, high-throughput, low-latency platform for handling real-time data feeds. Kafka can connect to external systems (for data import/export) via Kafka Connect and provides Kafka Streams, a Java stream processing library. Kafka uses a binary TCP-based protocol that is optimized for efficiency and relies on a &ldquo;message set&rdquo; abstraction that naturally groups messages together to reduce the overhead of the network roundtrip. This &ldquo;leads to larger network packets, larger sequential disk operations, contiguous memory blocks [&hellip;] which allows Kafka to turn a bursty stream of random message writes into linear writes.&rdquo;</p>]]></description></item><item><title>HDFS NFS Gateway: Benefits, Configuration, and Usage</title><link>https://jerrysmd.github.io/20200326_hdfs-nfs/</link><pubDate>Thu, 26 Mar 2020 11:02:36 +0800</pubDate><author/><guid>https://jerrysmd.github.io/20200326_hdfs-nfs/</guid><description>&lt;p>The major difference between the two is Replication/Fault Tolerance. HDFS was designed to survive failures. NFS does not have any fault tolerance built in. Other than fault tolerance, HDFS does support multiple replicas of files. This eliminates (or eases) the common bottleneck of many clients accessing a single file. Since files have multiple replicas, on different physical disks, reading performance scales better than NFS.&lt;/p></description></item></channel></rss>