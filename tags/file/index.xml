<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>file on JerrysBlog</title>
    <link>https://Jerrysmd.github.io/tags/file/</link>
    <description>Recent content in file on JerrysBlog</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Tue, 20 Oct 2020 18:39:37 -0700</lastBuildDate><atom:link href="https://Jerrysmd.github.io/tags/file/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>文件读取的高级方法：Advanced method of reading files</title>
      <link>https://Jerrysmd.github.io/post/20201020read_binary_file/</link>
      <pubDate>Tue, 20 Oct 2020 18:39:37 -0700</pubDate>
      
      <guid>https://Jerrysmd.github.io/post/20201020read_binary_file/</guid>
      <description>
        
          &lt;p&gt;读取二进制文件（任何文件都可以，本文以二进制为例），把二进制文件内容全部读取到char*字符串中。配合fseek()和fread()函数实现文件读取的高级方法。&lt;/p&gt;
&lt;h1 id=&#34;需求&#34;&gt;需求&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;使用fwrite(dbdata, dblength, 1,fp)把字节流写入二进制文件。在新程序读取二进制文件遇到问题：二进制内容不能向文本一样行读取，也不知道二进制文件长度，在fread()函数中无从下手。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;1creat-file-pointer-and-set-mode-as-rb&#34;&gt;1.creat FILE pointer and set mode as &amp;lsquo;rb&amp;rsquo;&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;FILE &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;f &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; fopen(inputFN, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;rb&amp;#34;&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;2check-the-file-pointer-is-not-null&#34;&gt;2.check the FILE pointer is not null&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;f) {
        fprintf(stderr, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ERROR: unable to open file &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;: %s&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, inputFN,strerror(errno));
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; NULL;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;3use-fseekftell-to-get-data-length&#34;&gt;3.use fseek/ftell to get data length&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;fseek(f,0,SEEK_END) put the pointer to the end of the file.&lt;/li&gt;
&lt;li&gt;ftell(f) can get the current offset.&lt;/li&gt;
&lt;li&gt;then use fseek(f,0,SEEK_SET) put the pointer to the start of file.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (fseek(f, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, SEEK_END) &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) {
        fprintf(stderr, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ERROR: unable to seek file &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;: %s&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, inputFN,
                strerror(errno));
        fclose(f);
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; NULL;
}
&lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; datalen &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ftell(f);
&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (dataLen &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) {
        fprintf(stderr, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ERROR: ftell() failed: %s&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, strerror(errno));
        fclose(f);
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; NULL;
}
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (fseek(f, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, SEEK_SET) &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) {
        fprintf(stderr, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ERROR: unable to seek file &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;: %s&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, inputFN,
                strerror(errno));
        fclose(f);
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; NULL;
    }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;4check-the-datalen&#34;&gt;4.check the datalen&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ((&lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt;)dataLen &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; UINT_MAX) {
        dataLen &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; UINT_MAX;
        printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;WARNING: clipping data to %ld bytes&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, dataLen);
    } &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (dataLen &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) {
        fprintf(stderr, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ERROR: input file &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; is empty&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, inputFN);
        fclose(f);
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; NULL;
    }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;5malloc-memory-to-char-inputdata&#34;&gt;5.malloc memory to char *inputData&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;inputData &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; static_cast&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&amp;gt;&lt;/span&gt;(malloc(dataLen));
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;inputData) {
        fprintf(stderr, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ERROR: unable to malloc %ld bytes&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, dataLen);
        fclose(f);
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; NULL;
    }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;6read-the-bin-data&#34;&gt;6.read the bin data&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// create a pointer p to point the begin of the inputData
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;p &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; inputData;
&lt;span style=&#34;color:#75715e&#34;&gt;// create a bytesLeft to record the moving of offset
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;size_t bytesLeft &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; dataLen;
&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (bytesLeft) {
	&lt;span style=&#34;color:#75715e&#34;&gt;//fread will return the bytes of read
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        size_t bytesRead &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; fread(p, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, bytesLeft, f);
        bytesLeft &lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt; bytesRead;
        p &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; bytesRead;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (ferror(f) &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) {
            fprintf(stderr, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ERROR: fread() failed&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);
            free(inputData);
            fclose(f);
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; NULL;
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;7close-the-file-stream&#34;&gt;7.close the File stream&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;fclose(f);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;8return-length--inputdata&#34;&gt;8.return length &amp;amp; inputData&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//change the parameter of &amp;amp;length
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;length &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;)dataLen;
&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; inputData;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;9完整代码&#34;&gt;9.完整代码&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;    FILE &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;f &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; fopen(inputFN, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;rb&amp;#34;&lt;/span&gt;);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;f) {
        fprintf(stderr, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ERROR: unable to open file &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;: %s&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, inputFN,strerror(errno));
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; NULL;
    }

    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (fseek(f, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, SEEK_END) &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) {
        fprintf(stderr, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ERROR: unable to seek file &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;: %s&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, inputFN,
                strerror(errno));
        fclose(f);
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; NULL;
    }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; dataLen &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ftell(f);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (dataLen &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) {
        fprintf(stderr, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ERROR: ftell() failed: %s&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, strerror(errno));
        fclose(f);
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; NULL;
    }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (fseek(f, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, SEEK_SET) &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) {
        fprintf(stderr, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ERROR: unable to seek file &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;: %s&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, inputFN,
                strerror(errno));
        fclose(f);
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; NULL;
    }

    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ((&lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt;)dataLen &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; UINT_MAX) {
        dataLen &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; UINT_MAX;
        printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;WARNING: clipping data to %ld bytes&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, dataLen);
    } &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (dataLen &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) {
        fprintf(stderr, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ERROR: input file &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; is empty&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, inputFN);
        fclose(f);
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; NULL;
    }

    &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;inputData &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; static_cast&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&amp;gt;&lt;/span&gt;(malloc(dataLen));
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;inputData) {
        fprintf(stderr, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ERROR: unable to malloc %ld bytes&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, dataLen);
        fclose(f);
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; NULL;
    }

    &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;p &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; inputData;
    size_t bytesLeft &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; dataLen;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (bytesLeft) {
        size_t bytesRead &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; fread(p, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, bytesLeft, f);
        bytesLeft &lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt; bytesRead;
        p &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; bytesRead;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (ferror(f) &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) {
            fprintf(stderr, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ERROR: fread() failed&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);
            free(inputData);
            fclose(f);
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; NULL;
        }
    }

    fclose(f);

    &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;length &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;)dataLen;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>文件读取多读取一行空行问题: The problem about file reading one more line</title>
      <link>https://Jerrysmd.github.io/post/20201010cgetline/</link>
      <pubDate>Sat, 10 Oct 2020 21:58:13 -0800</pubDate>
      
      <guid>https://Jerrysmd.github.io/post/20201010cgetline/</guid>
      <description>
        
          &lt;p&gt;getline()/get()/read()会出现多读一行的现象。造成该原因可能文件本身问题和getline()函数的问题。可以在while处判断时先判断getline()/get()/read()，如果拿到数据再处理。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Insert Lead paragraph here.&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;1-问题原因&#34;&gt;1. 问题原因&lt;/h2&gt;
&lt;h3 id=&#34;1-问题1-文件末尾存在回车&#34;&gt;1. 问题1: 文件末尾存在回车&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;　　&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;feof(fp))
　　{
　　	fgets(buffer,&lt;span style=&#34;color:#ae81ff&#34;&gt;256&lt;/span&gt;,fp);
　　	j&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;
　　}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;feof（）这个函数是用来判断指针是否已经到达文件尾部的。若fp已经指向文件末尾，则feof（fp）函数值为“真”，即返回非零值；否则返回0。&lt;/p&gt;
&lt;p&gt;如果文件还有换行或者空格的时候， 他会继续循环。&lt;/p&gt;
&lt;h3 id=&#34;2问题2-getlines1024n函数&#34;&gt;2.问题2: getline(s,1024,&#39;\n&#39;)函数&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;　　&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;feof(s))
　　{
    　　infile.getline(s,&lt;span style=&#34;color:#ae81ff&#34;&gt;1024&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;\n&amp;#39;&lt;/span&gt;);
　　}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;最后语句&lt;!-- raw HTML omitted --&gt;infile.getline(s,1024,&#39;\n&#39;)&lt;!-- raw HTML omitted --&gt;未读到内容，出错后，变量s的内容并没改变，程序仍可继续执行，使s中的原数据再使用了一次。&lt;/p&gt;
&lt;h2 id=&#34;2-解决方法&#34;&gt;2. 解决方法&lt;/h2&gt;
&lt;h3 id=&#34;1-fgets放到while里判断&#34;&gt;1. fgets放到while里判断&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;　　&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (fgets(buffer,&lt;span style=&#34;color:#ae81ff&#34;&gt;256&lt;/span&gt;,fp))
　　{
　　	j&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;
　　}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;2getline放到while里判断&#34;&gt;2.getline放到while里判断&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;　　&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt;(infile.getline(s,&lt;span style=&#34;color:#ae81ff&#34;&gt;1024&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;\n&amp;#39;&lt;/span&gt;))
　　{
　　　　.......
　　}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;即infile.getline(s,1024,&#39;\n&#39;)正确读到数据后再处理。&lt;/p&gt;
&lt;p&gt;同理，对get()/read()等都类似处理。&lt;/p&gt;
        
      </description>
    </item>
    
  </channel>
</rss>
