<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Hdfs - Tag - JerrysBlog</title><link>https://jerrysmd.github.io/tags/hdfs/</link><description>Hdfs - Tag - JerrysBlog</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Tue, 15 Dec 2020 10:47:59 +0800</lastBuildDate><atom:link href="https://jerrysmd.github.io/tags/hdfs/" rel="self" type="application/rss+xml"/><item><title>HDFS: Parquet Format</title><link>https://jerrysmd.github.io/20201215_parquet-format/</link><pubDate>Tue, 15 Dec 2020 10:47:59 +0800</pubDate><author/><guid>https://jerrysmd.github.io/20201215_parquet-format/</guid><description>&lt;p>Apache Parquet is designed for efficient as well as performant flat columnar storage format of data compared to row based files like CSV or TSV files. Parquet uses the record shredding and assembly algorithm which is superior to simple flattening of nested namespaces. Parquet is optimized to work with complex data in bulk and features different ways for efficient data compression and encoding types. This approach is best especially for those queries that need to read certain columns from a large table. Parquet can only read the needed columns therefore greatly minimizing the IO.&lt;/p></description></item><item><title>Hbase Performance Tuning</title><link>https://jerrysmd.github.io/20201026_hbase-optimize/</link><pubDate>Mon, 26 Oct 2020 09:14:35 +0800</pubDate><author/><guid>https://jerrysmd.github.io/20201026_hbase-optimize/</guid><description>&lt;p>HBase is a high reliability, high performance, column-oriented, and scalable distributed database. However, the READ/write performance deteriorates when a large amount of concurrent data or existing data is generated. You can use the following methods to improve the HBase search speed.&lt;/p></description></item><item><title>Hbase Rowkey Design</title><link>https://jerrysmd.github.io/20201016_hbase-rowkey-design/</link><pubDate>Fri, 16 Oct 2020 10:30:42 +0800</pubDate><author/><guid>https://jerrysmd.github.io/20201016_hbase-rowkey-design/</guid><description>&lt;p>Rows in HBase are sorted lexicographically by row key. This design optimizes for scans, allowing you to store related rows, or rows that will be read together, near each other. However, poorly designed row keys are a common source of hotspotting. Hotspotting occurs when a large amount of client traffic is directed at one node, or only a few nodes, of a cluster. This traffic may represent reads, writes, or other operations. The traffic overwhelms the single machine responsible for hosting that region, causing performance degradation and potentially leading to region unavailability. This can also have adverse effects on other regions hosted by the same region server as that host is unable to service the requested load. It is important to design data access patterns such that the cluster is fully and evenly utilized.&lt;/p></description></item><item><title>Hive Key Points</title><link>https://jerrysmd.github.io/20200615_hive-key-point/</link><pubDate>Mon, 15 Jun 2020 09:26:00 +0800</pubDate><author/><guid>https://jerrysmd.github.io/20200615_hive-key-point/</guid><description>&lt;p>Hive is a Hadoop-based data warehouse tool that maps structured data files into a database table and provides complete SQL query functionality that converts SQL statements into MapReduce tasks for execution. It is very suitable for statistical analysis of data warehouse.&lt;/p></description></item><item><title>HDFS &amp; NFS</title><link>https://jerrysmd.github.io/20200326_hdfs-nfs/</link><pubDate>Thu, 26 Mar 2020 11:02:36 +0800</pubDate><author/><guid>https://jerrysmd.github.io/20200326_hdfs-nfs/</guid><description>&lt;p>The major difference between the two is Replication/Fault Tolerance. HDFS was designed to survive failures. NFS does not have any fault tolerance built in. Other than fault tolerance, HDFS does support multiple replicas of files. This eliminates (or eases) the common bottleneck of many clients accessing a single file. Since files have multiple replicas, on different physical disks, reading performance scales better than NFS.&lt;/p></description></item></channel></rss>