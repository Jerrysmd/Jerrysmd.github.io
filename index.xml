<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>JerrysBlog</title>
    <link>https://Jerrysmd.github.io/</link>
    <description>Recent content on JerrysBlog</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>Copyright © 2008–2018, Steve Francia and the Hugo Authors; all rights reserved.</copyright>
    <lastBuildDate>Mon, 26 Oct 2020 18:39:37 -0700</lastBuildDate><atom:link href="https://Jerrysmd.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>读取二进制文件</title>
      <link>https://Jerrysmd.github.io/post/read_binary_file/</link>
      <pubDate>Mon, 26 Oct 2020 18:39:37 -0700</pubDate>
      
      <guid>https://Jerrysmd.github.io/post/read_binary_file/</guid>
      <description>需求  hyperscan中使用fwrite(dbdata, dblength, 1,fp)把字节流写入二进制文件。在新程序读取二进制文件遇到问题：由于不知道二进制文件长度，不知到如何读取全部的二进制到一个char*中。   1.creat FILE pointer and set mode as &#39;rb&#39; 1FILE *f = fopen(inputFN, &amp;#34;rb&amp;#34;); 2.check the FILE pointer is not null 1if (!f) { 2 fprintf(stderr, &amp;#34;ERROR: unable to open file \&amp;#34;%s\&amp;#34;: %s\n&amp;#34;, inputFN,strerror(errno)); 3 return NULL; 4} 3.use fseek/ftell to get data length  fseek(f,0,SEEK_END) put the pointer to the end of the file. ftell(f) can get the current offset. then use fseek(f,0,SEEK_SET) put the pointer to the start of file.</description>
    </item>
    
    <item>
      <title>Hyperscan教程</title>
      <link>https://Jerrysmd.github.io/post/hyperscan/</link>
      <pubDate>Sat, 03 Oct 2020 05:42:44 -0700</pubDate>
      
      <guid>https://Jerrysmd.github.io/post/hyperscan/</guid>
      <description>1. 概述 Hyperscan demo中使用libpcap从pcap文件中读取数据包，并根据一个规则文件中指定的多个正则表达式对报文进行匹配，并输出匹配结果和一些统计信息。pcapscan使用并对比了两种匹配模式：BLOCK和STREAM。BLOCK模式时它对单个数据包进行匹配；而STREAM模式下它通过五元组将数据包进行简单分流，并对每条流中的数据进行匹配。STREAM模式可以命中跨越数据包边界的匹配数据（比如，要匹配abc，而a在前一个数据的末尾，而bc在后一个数据包的前端，这两个数据包在一个流中，那么STREAM模式匹配可以命中它，而BLOCK模式不能）。
2. Hyperscan源码 2.1 编译 函数buildDatabase用来编译规则文件中的多个正则表达式，参数mode指定了是BLOCK还是STREAM模式。
1static hs_database_t *buildDatabase(const vector&amp;lt;const char *&amp;gt; &amp;amp;expressions, 2 const vector&amp;lt;unsigned&amp;gt; flags, 3 const vector&amp;lt;unsigned&amp;gt; ids, 4 unsigned int mode) { 5 hs_database_t *db; 6 hs_compile_error_t *compileErr; 7 hs_error_t err; 8 9 Clock clock; 10 clock.start(); 11 12 err = hs_compile_multi(expressions.data(), flags.data(), ids.data(), 13 expressions.size(), mode, nullptr, &amp;amp;db, &amp;amp;compileErr); 14 15 clock.stop(); 16 17 if (err != HS_SUCCESS) { 18 if (compileErr-&amp;gt;expression &amp;lt; 0) { 19 // The error does not refer to a particular expression.</description>
    </item>
    
    <item>
      <title>Markdown Syntax Guide</title>
      <link>https://Jerrysmd.github.io/post/markdown-syntax/</link>
      <pubDate>Fri, 02 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://Jerrysmd.github.io/post/markdown-syntax/</guid>
      <description>&lt;p&gt;This article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>更新HUGO步骤</title>
      <link>https://Jerrysmd.github.io/post/updatablog/</link>
      <pubDate>Thu, 01 Oct 2020 05:06:59 -0700</pubDate>
      
      <guid>https://Jerrysmd.github.io/post/updatablog/</guid>
      <description>1.新建博客 1hugo new post/*.md 2.更新静态网页 1hugo --theme=hugo-clarity --baseUrl=&amp;#34;https://Jerrysmd.github.io/&amp;#34; 3.推到GithubPages 1cd public/ 2git add . 3git commit -m &amp;#39;update blog&amp;#39; 4git push -u origin master 完整操作 1hugo --theme=hugo-clarity --baseUrl=&amp;#34;https://Jerrysmd.github.io/&amp;#34; 2cd public/ 3git add . 4git commit -m &amp;#39;update blog&amp;#39; 5git push -u origin master </description>
    </item>
    
    <item>
      <title></title>
      <link>https://Jerrysmd.github.io/archives/</link>
      <pubDate>Tue, 28 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://Jerrysmd.github.io/archives/</guid>
      <description></description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://Jerrysmd.github.io/about/</link>
      <pubDate>Thu, 28 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://Jerrysmd.github.io/about/</guid>
      <description>Written in Go, Hugo is an open source static site generator available under the Apache Licence 2.0. Hugo supports TOML, YAML and JSON data file types, Markdown and HTML content files and uses shortcodes to add rich content. Other notable features are taxonomies, multilingual mode, image processing, custom output formats, HTML/CSS/JS minification and support for Sass SCSS workflows.
Hugo makes use of a variety of open source projects including:
 https://github.</description>
    </item>
    
    <item>
      <title>Sobre</title>
      <link>https://Jerrysmd.github.io/about.pt/</link>
      <pubDate>Thu, 28 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://Jerrysmd.github.io/about.pt/</guid>
      <description>Tradução em português. Apenas para demonstração, o resto do artigo não está traduzido.
Written in Go, Hugo is an open source static site generator available under the Apache Licence 2.0. Hugo supports TOML, YAML and JSON data file types, Markdown and HTML content files and uses shortcodes to add rich content. Other notable features are taxonomies, multilingual mode, image processing, custom output formats, HTML/CSS/JS minification and support for Sass SCSS workflows.</description>
    </item>
    
  </channel>
</rss>
